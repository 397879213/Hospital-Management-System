/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SysadminRole;

import Business.Department.DepartmentClass;
import Business.Department.DoctorDepartment;
import Business.Department.PatientDepartment;
import Business.Doctor.DoctorDetails;
import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lsrajput
 */
public class ManagePatientRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManagePatientRequestJPanel
     */
    private JPanel displayJPanel;
    private Ecosystem ecosystem;
    public ManagePatientRequestJPanel(JPanel displayJPanel,Ecosystem ecosystem) {
        initComponents();
        this.displayJPanel = displayJPanel;
        this.ecosystem = ecosystem;
        populateTable();
        populateDoctorComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PatientReqjTable = new javax.swing.JTable();
        workQueueJLabel = new javax.swing.JLabel();
        patientIDJLabel = new javax.swing.JLabel();
        patientIDTxtField = new javax.swing.JTextField();
        newConsultantJLabel = new javax.swing.JLabel();
        newConsultantComboBox = new javax.swing.JComboBox();
        changeBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        jLabel1.setText("Enterprise <Grey Sloan Medical Centre>");

        PatientReqjTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Current Consultant"
            }
        ));
        jScrollPane1.setViewportView(PatientReqjTable);

        workQueueJLabel.setText("Work Queue :");

        patientIDJLabel.setText("Patient ID :");

        patientIDTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientIDTxtFieldActionPerformed(evt);
            }
        });

        newConsultantJLabel.setText("New Consultant :");

        newConsultantComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        changeBtn.setText("Change");
        changeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(workQueueJLabel)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(changeBtn)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(patientIDJLabel)
                                    .addGap(30, 30, 30)
                                    .addComponent(patientIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGap(75, 75, 75)
                                    .addComponent(backBtn)))
                            .addGap(60, 60, 60)
                            .addComponent(newConsultantJLabel)
                            .addGap(18, 18, 18)
                            .addComponent(newConsultantComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addComponent(workQueueJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patientIDJLabel)
                    .addComponent(patientIDTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newConsultantJLabel)
                    .addComponent(newConsultantComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(changeBtn)
                    .addComponent(backBtn))
                .addGap(47, 47, 47))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) PatientReqjTable.getModel();
        
        model.setRowCount(0);
        
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof PatientDepartment)
            {
                for (Patient patient : ((PatientDepartment) dept).getPatientDirectory().getPatientList()){
                    Object[] row = new Object[3];
                    row[0] = patient.getPatientId();
                    row[1] = patient.getPatientName();
                    row[2] = patient.getDoctorName();
                    model.addRow(row);
                }
            }
        }
    }
    public void populateDoctorComboBox()
    {
        try
        {
            newConsultantComboBox.removeAllItems();
            for(DepartmentClass departmentClass: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
            {
                if(departmentClass instanceof DoctorDepartment)
                {
                    for(UserAccount ua:departmentClass.getUserDir().getUserAccountsList() )
                    {
                        Employee emp = ua.getEmployee();
                        newConsultantComboBox.addItem(emp.getEmployeeId()+" - "+emp.getFirstName());
                    }
                }
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        
        
    }
    private void patientIDTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientIDTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_patientIDTxtFieldActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        displayJPanel.remove(this);
        CardLayout layout = (CardLayout) displayJPanel.getLayout();
        layout.previous(displayJPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void changeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeBtnActionPerformed
        int patientId = Integer.parseInt(patientIDTxtField.getText());
        String doctor = (String)newConsultantComboBox.getSelectedItem();
        Patient cur_patient = null;
        int currDoctorId = 0;
        String[] doctorArray = doctor.split(" - ");
        int docId = Integer.parseInt(doctorArray[0]);
        String docName = doctorArray[1];
        //System.out.println("Removing patient from current doctor");
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof PatientDepartment)
            {
                for (Patient patient : ((PatientDepartment) dept).getPatientDirectory().getPatientList()){
                     if(patient.getPatientId()==patientId)
                     {
                         currDoctorId = patient.getDoctorId();
                     }
                }
            }
        }
        
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            
            if(dept instanceof PatientDepartment)
            {
                for (Patient patient : ((PatientDepartment) dept).getPatientDirectory().getPatientList()){
                     if(patient.getPatientId()==patientId)
                     {
                         patient.setDoctorId(docId);
                         patient.setDoctorName(docName);
                         cur_patient = patient;
                     }
                }
            }
        }
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof DoctorDepartment)
            {
                for (DoctorDetails doc : ((DoctorDepartment) dept).getDoctorDirectory().getDocDetails()){
                     if(doc.getEmployeeId()==docId)
                     {
                        doc.getPatientDirectory().getPatientList().add(cur_patient); 
                     }
                }
            }
        }
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof DoctorDepartment)
            {
                for(DoctorDetails doc: ((DoctorDepartment) dept).getDoctorDirectory().getDocDetails())
                {
                    if(doc.getEmployeeId()==currDoctorId)
                     {
                        doc.getPatientDirectory().removePatient(patientId); 
                     }
                }
            }
        }
        JOptionPane.showMessageDialog(PatientReqjTable,"Consultant Updated Successfully");
        populateTable();
    }//GEN-LAST:event_changeBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable PatientReqjTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton changeBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox newConsultantComboBox;
    private javax.swing.JLabel newConsultantJLabel;
    private javax.swing.JLabel patientIDJLabel;
    private javax.swing.JTextField patientIDTxtField;
    private javax.swing.JLabel workQueueJLabel;
    // End of variables declaration//GEN-END:variables
}
