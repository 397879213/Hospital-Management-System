/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SysadminRole;

import Business.Department.DepartmentClass;
import Business.Department.DoctorDepartment;
import Business.Department.EngineeringDepartment;
import Business.Department.EquipmentMaintenanceDepartment;
import Business.Department.LabDepartment;
import Business.Department.NurseDepartment;
import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Role.*;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lsrajput
 */
public class ManageUserAccounts extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserAccounts
     */
    private JPanel displayJPanel;
    private Ecosystem ecosystem;
    public ManageUserAccounts(JPanel displayJPanel,  Ecosystem ecosystem) {
        initComponents();
        this.displayJPanel = displayJPanel;
        this.ecosystem = ecosystem;
        populateTable();
        populateDepartmentComboBox();
        populateEmployeeComboBox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userNameJTable = new javax.swing.JTable();
        departmentJLabel = new javax.swing.JLabel();
        departmentComboBox = new javax.swing.JComboBox();
        employeeJLabel = new javax.swing.JLabel();
        EmployeeComboBox = new javax.swing.JComboBox();
        userNameJLabel = new javax.swing.JLabel();
        userNameTxtField = new javax.swing.JTextField();
        pwJLabel = new javax.swing.JLabel();
        pwTxtField = new javax.swing.JTextField();
        createBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();

        jLabel1.setText("Enterprise <Grey Sloan Medical Centre>");

        userNameJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "UserName", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(userNameJTable);
        if (userNameJTable.getColumnModel().getColumnCount() > 0) {
            userNameJTable.getColumnModel().getColumn(0).setResizable(false);
            userNameJTable.getColumnModel().getColumn(1).setResizable(false);
        }

        departmentJLabel.setText("Department :");

        departmentComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Engineering", "Accounts", "Equipment Maintenance", "Doctor", "Nurse", "Lab Technician" }));
        departmentComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                departmentComboBoxItemStateChanged(evt);
            }
        });

        employeeJLabel.setText("Employee :");

        EmployeeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        userNameJLabel.setText("UserName :");

        pwJLabel.setText("Password :");

        createBtn.setText("Create");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createBtn))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(departmentJLabel)
                                .addComponent(employeeJLabel)
                                .addComponent(userNameJLabel)
                                .addComponent(pwJLabel))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(EmployeeComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(userNameTxtField)
                                .addComponent(pwTxtField)))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(departmentJLabel)
                    .addComponent(departmentComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeJLabel)
                    .addComponent(EmployeeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameJLabel)
                    .addComponent(userNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pwJLabel)
                    .addComponent(pwTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createBtn)
                    .addComponent(backBtn))
                .addGap(127, 127, 127))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateDepartmentComboBox(){
        departmentComboBox.removeAllItems();
        departmentComboBox.addItem(DepartmentClass.Type.Accounts);
        departmentComboBox.addItem(DepartmentClass.Type.Doctor);
        departmentComboBox.addItem(DepartmentClass.Type.Engineering);
        departmentComboBox.addItem(DepartmentClass.Type.EquipmentMaintenance);
        departmentComboBox.addItem(DepartmentClass.Type.Lab);
        departmentComboBox.addItem(DepartmentClass.Type.Nurse);
        //departmentComboBox.addItem(DepartmentClass.Type.Patient);
    }
    
    public void populateEmployeeComboBox()
    {
        try
        {
            EmployeeComboBox.removeAllItems();
            DepartmentClass.Type type = (DepartmentClass.Type) departmentComboBox.getSelectedItem();
            for(DepartmentClass departmentClass: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
            {
                if(departmentClass.getFullname().equalsIgnoreCase(type.getValue()))
                {
                    for(Employee emp:departmentClass.getEmpDir().getEmployeeList() )
                    {
                        EmployeeComboBox.addItem(emp.getFirstName());
                    }
                }
            }
        }
        catch(Exception e)
        {
            System.out.println(e.getMessage());
        }
        
        
    }
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) userNameJTable.getModel();
        
        model.setRowCount(0);
        
        for (DepartmentClass dept : ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList()){
            for(UserAccount user: dept.getUserDir().getUserAccountsList())
            {
                Object[] row = new Object[2];
                row[0] = user.getUserName();
                row[1] = dept.getFullname();
                model.addRow(row);
            }
        }
    }
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        displayJPanel.remove(this);
        CardLayout layout = (CardLayout) displayJPanel.getLayout();
        layout.previous(displayJPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        DepartmentClass.Type type = (DepartmentClass.Type) departmentComboBox.getSelectedItem();
        String empName = (String)EmployeeComboBox.getSelectedItem();
        Employee employee = new Employee();
        employee.setFirstName(empName);
        String userName = userNameTxtField.getText();
        String password = pwTxtField.getText();
        
        for(DepartmentClass departmentClass: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(departmentClass.getFullname().equalsIgnoreCase(type.getValue()))
            {
                if (type.getValue().equals(DepartmentClass.Type.Accounts.getValue())){
                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new AccountsTeam());
                }
                else if (type.getValue().equals(DepartmentClass.Type.Doctor.getValue())){
                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new Doctor());
                    if(departmentClass instanceof DoctorDepartment)
                    {
                        ((DoctorDepartment) departmentClass).getDoctorDirectory().CreateDoctor(employee.getEmployeeId(),employee.getFirstName());
                    }
                }
                else if (type.getValue().equals(DepartmentClass.Type.Engineering.getValue())){
                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new EnggTeam());
                    if(departmentClass instanceof EngineeringDepartment)
                    {
                        ((EngineeringDepartment) departmentClass).getEngineeringTeamDirectory().createEnggTeam(employee.getEmployeeId(), employee.getFirstName());
                    }
                }
                else if (type.getValue().equals(DepartmentClass.Type.EquipmentMaintenance.getValue())){
                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new EquipmentMaintenanceTeam());
                    if(departmentClass instanceof EquipmentMaintenanceDepartment)
                    {
                       ((EquipmentMaintenanceDepartment) departmentClass).getEquipmentMaintananceDirectory().createEMEmployee(employee.getEmployeeId(), employee.getFirstName());
                    }
                }
                else if (type.getValue().equals(DepartmentClass.Type.Lab.getValue())){
                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new LabTechnician());
                    if(departmentClass instanceof LabDepartment)
                    {
                        ((LabDepartment) departmentClass).getLabTechnicianDirectory().createLabTechnician(employee.getEmployeeId(), employee.getFirstName());
                    }
                }
                else if (type.getValue().equals(DepartmentClass.Type.Nurse.getValue())){
                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new Nurse());
                    if(departmentClass instanceof NurseDepartment)
                    {
                        ((NurseDepartment) departmentClass).getNurseDirectory().createNurse(employee.getEmployeeId(), employee.getFirstName());
                    }
                }
//                else if (type.getValue().equals(DepartmentClass.Type.Patient.getValue())){
//                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new Patient());
//                }
//                else if (type.getValue().equals(DepartmentClass.Type.SystemAdmin.getValue())){
//                    departmentClass.getUserDir().createUserAccount(userName, password, employee, new SystemAdmin());
//                }
            }
        }
        JOptionPane.showMessageDialog(displayJPanel,"User created successfully!");
        populateTable();
    }//GEN-LAST:event_createBtnActionPerformed

    private void departmentComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_departmentComboBoxItemStateChanged
        populateEmployeeComboBox();
    }//GEN-LAST:event_departmentComboBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox EmployeeComboBox;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton createBtn;
    private javax.swing.JComboBox departmentComboBox;
    private javax.swing.JLabel departmentJLabel;
    private javax.swing.JLabel employeeJLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel pwJLabel;
    private javax.swing.JTextField pwTxtField;
    private javax.swing.JLabel userNameJLabel;
    private javax.swing.JTable userNameJTable;
    private javax.swing.JTextField userNameTxtField;
    // End of variables declaration//GEN-END:variables
}
