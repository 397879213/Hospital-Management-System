/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DoctorRole;

import Business.Department.DepartmentClass;
import Business.Department.DoctorDepartment;
import Business.Department.EngineeringDepartment;
import Business.Department.EquipmentMaintenanceDepartment;
import Business.Department.PatientDepartment;
import Business.Doctor.DoctorDetails;
import Business.Doctor.DoctorDirectory;
import Business.Role.Doctor;
import Business.Doctor.DoctorDirectory;
import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Patient.Patient;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.SysadminRole.CreatepatientsJPanel;

/**
 *
 * @author lsrajput
 */
public class DoctorJPanel extends javax.swing.JPanel {
    private JPanel displayJPanel;
    private UserAccount account;
    private DepartmentClass department;
    private Enterprise enterprise;
    /**
     * Creates new form DoctorJPanel
     */
    private DoctorDirectory docDir;
    private Ecosystem ecosystem;
    public DoctorJPanel(JPanel displayJPanel, UserAccount account, DepartmentClass department, Enterprise enterprise, Ecosystem ecosystem) {
        initComponents();
        this.displayJPanel = displayJPanel;
        this.department = department;
        this.enterprise = enterprise;
        this.account = account;
        this.ecosystem = ecosystem;
        Employee emp = account.getEmployee();
        fnameTextField.setText(account.getEmployee().getFirstName());
        fnameTextField.setEditable(false);
        empidTextField.setText(account.getEmployee().getEmployeeId()+"");
        empidTextField.setEditable(false);
        if(emp.getDateOfBirth()!=null)
        {
           jTextField3.setText(emp.getDateOfBirth());
        }
        if(emp.getLastName()!=null)
        {
            lnameTextField.setText(emp.getLastName());
        }
        if(emp.getSalary()!=null)
        {
            salaryTxtField.setText(emp.getSalary());
        }
        if(emp.getDesignation()!=null)
        {
           designationComboBox.setSelectedItem(emp.getDesignation());
        }
        if(emp.getTeamType()!=null)
        {
            teamTypeTextField.setText(emp.getTeamType());
        }
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        detailsLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fnameTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        lnameTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        empidTextField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        teamTypeTextField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        designationComboBox = new javax.swing.JComboBox();
        salaryTxtField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        workQueueLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        ViewBtn = new javax.swing.JButton();
        assignNurseBtn = new javax.swing.JButton();
        labReportsBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        teamTypejComboBox1 = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        submitBtn = new javax.swing.JButton();
        IssueDescjTextField1 = new javax.swing.JTextField();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Grey Sloan Hospital");

        jLabel2.setText("Welcome <Ria Rajput>");

        detailsLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        detailsLabel.setText("Personal  Details");

        jLabel4.setText("First Name");

        fnameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fnameTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Last Name");

        jLabel6.setText("Date of Birth");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Employee ID");

        jLabel8.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel8.setText("Work Details");

        jLabel9.setText("Team Type");

        teamTypeTextField.setText("Doctors");
        teamTypeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamTypeTextFieldActionPerformed(evt);
            }
        });

        jLabel10.setText("Designation");

        designationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Trainee Doctor", "Physician", "Senior Doctor", "Head Doctor" }));
        designationComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                designationComboBoxItemStateChanged(evt);
            }
        });

        salaryTxtField.setEditable(false);
        salaryTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salaryTxtFieldActionPerformed(evt);
            }
        });

        jLabel11.setText("Salary");

        workQueueLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        workQueueLabel.setText("Work Queue");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ID", "Patient Name", "Patient Type", "Room No", "Prescribed Medicines", "Next Appointment"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        ViewBtn.setText("View");
        ViewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewBtnActionPerformed(evt);
            }
        });

        assignNurseBtn.setText("Assign Nurse");
        assignNurseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignNurseBtnActionPerformed(evt);
            }
        });

        labReportsBtn.setText("Request for Lab Reports");
        labReportsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labReportsBtnActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("Raise a Request");

        jLabel12.setText("Team Type");

        teamTypejComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Engineering Team", "Tech Support Team", "Equipment Maintenance Team", "Grey  Medith Hospital" }));

        jLabel13.setText("Issue Description");

        jButton3.setText("Submit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        IssueDescjTextField1.setText("Description");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel4)
                                            .addGap(18, 18, 18)
                                            .addComponent(fnameTextField))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel9)
                                                .addComponent(jLabel11))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(salaryTxtField)
                                                .addComponent(teamTypeTextField))))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel10)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(designationComboBox, 0, 1, Short.MAX_VALUE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel5)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(lnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel7)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(empidTextField))))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(124, 124, 124)
                                            .addComponent(submitBtn))))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(162, 162, 162)))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 467, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButton3)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(detailsLabel)
                                        .addComponent(workQueueLabel)
                                        .addComponent(jLabel3)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ViewBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(assignNurseBtn)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(labReportsBtn)))
                                    .addGap(125, 125, 125)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(teamTypejComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(IssueDescjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(detailsLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(lnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(empidTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(teamTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(designationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salaryTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(submitBtn))
                .addGap(18, 18, 18)
                .addComponent(workQueueLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ViewBtn)
                    .addComponent(assignNurseBtn)
                    .addComponent(labReportsBtn))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(teamTypejComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(IssueDescjTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(49, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
  public void populateDocSalary()
  {
    if(designationComboBox.getSelectedItem()=="Trainee Doctor")
      {
          salaryTxtField.setText("20000.00");
      }
      else if(designationComboBox.getSelectedItem()=="Physician")
      {
          salaryTxtField.setText("22500.00");
      }
      else if(designationComboBox.getSelectedItem()=="Senior Doctor")
      {
          salaryTxtField.setText("25000.00");
      }
      else
      {
          salaryTxtField.setText("40000.00");
      }
  }
    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        
        model.setRowCount(0);
        
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof DoctorDepartment)
            {
                    for(DoctorDetails doctor: ((DoctorDepartment) dept).getDoctorDirectory().getDocDetails())
                    {
                        if(doctor.getEmployeeId()==account.getEmployee().getEmployeeId())
                        {
                            for (Patient patient : doctor.getPatientDirectory().getPatientList()){
                                if(patient!=null)
                                {
                                    Object[] row = new Object[6];
                                    row[0] = patient.getPatientId();
                                    row[1] = patient.getPatientName();
                                    row[2] = patient.getPatientType();
                                    row[3] = patient.getPatientRoomNo();
                                    row[4] = "Sample Prescription";
                                    row[5] = "28/12/2018";
                                    model.addRow(row);
                                }
                            }
                        }
                    }
            }
        }
    }
    private void fnameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fnameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fnameTextFieldActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void teamTypeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamTypeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teamTypeTextFieldActionPerformed

    private void salaryTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salaryTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_salaryTxtFieldActionPerformed

    private void ViewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewBtnActionPerformed
        int row = jTable2.getSelectedRow();
        int column = jTable2.getSelectedColumn();
        int patientId = 0;
        System.out.println("row: "+row+" column: "+column+" value: "+jTable2.getValueAt(row, column));
        try{
            patientId = (Integer)jTable2.getValueAt(row, column);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(displayJPanel,"Select valid Patient ID.");
            return;
        }
        boolean isDisplayed = false;
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof DoctorDepartment)
            {
                    for(DoctorDetails doctor: ((DoctorDepartment) dept).getDoctorDirectory().getDocDetails())
                    {
                        if(doctor.getEmployeeId()==account.getEmployee().getEmployeeId())
                        {
                            for (Patient patient : doctor.getPatientDirectory().getPatientList()){
                                if(patient!=null && patient.getPatientId()==patientId)
                                {
                                    StringBuilder str = new StringBuilder();
                                    str.append("Patiet ID: "+patient.getPatientId()+"\n");
                                    str.append("Patient Name: "+patient.getPatientName()+"\n");
                                    str.append("Patient type: "+patient.getPatientType()+"\n");
                                    str.append("Patient Room no: "+patient.getPatientRoomNo()+"\n");
                                    str.append("Prescription: Sample Prescription"+"\n");
                                    str.append("Next Appointment: 28/12/2018"+"\n");
                                    isDisplayed = true;
                                    JOptionPane.showMessageDialog(displayJPanel,str);
                                }
                            }
                        }
                    }
            }
        }
        if(!isDisplayed)
        {
            JOptionPane.showMessageDialog(displayJPanel,"No records found. Select valid Patient ID.");
        }
    }//GEN-LAST:event_ViewBtnActionPerformed

    private void labReportsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labReportsBtnActionPerformed
        int row = jTable2.getSelectedRow();
        int column = jTable2.getSelectedColumn();
        int patientId = 0;
        System.out.println("row: "+row+" column: "+column+" value: "+jTable2.getValueAt(row, column));
        try{
            patientId = (Integer)jTable2.getValueAt(row, column);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(displayJPanel,"Select valid Patient ID.");
            return;
        }
        boolean isDisplayed = false;
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof DoctorDepartment)
            {
                    for(DoctorDetails doctor: ((DoctorDepartment) dept).getDoctorDirectory().getDocDetails())
                    {
                        if(doctor.getEmployeeId()==account.getEmployee().getEmployeeId())
                        {
                            for (Patient patient : doctor.getPatientDirectory().getPatientList()){
                                if(patient!=null && patient.getPatientId()==patientId)
                                {
                                    isDisplayed = true;
                                    CardLayout layout = (CardLayout)this.displayJPanel.getLayout();
                                    this.displayJPanel.add(new RequestForLabReportsJPanel(displayJPanel, ecosystem, patient));
                                    layout.next(displayJPanel);
                                    
                                }
                            }
                        }
                    }
            }
        }
        if(!isDisplayed)
        {
            JOptionPane.showMessageDialog(displayJPanel,"No records found. Select valid Patient ID.");
        }
        
    }//GEN-LAST:event_labReportsBtnActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String teamType = (String)teamTypejComboBox1.getSelectedItem();
        String issueDesc = IssueDescjTextField1.getText();
        if("Equipment Maintenance Team".equalsIgnoreCase(teamType))
        {
            try
            {
                for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
                {
                    if(dept instanceof EquipmentMaintenanceDepartment)
                    {
                        ((EquipmentMaintenanceDepartment) dept).getEquipmentMaintananceDirectory().getEquipmentMaintananceList().get(0).getWorkQueueDirectory().createWorkQueue(issueDesc);

                    }
                }
                JOptionPane.showMessageDialog(displayJPanel,"Work Queue added to Equipment Maintenance Team.");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(displayJPanel,"Equipment Maintenance team not available");
            }
            
        }
        else if("Engineering Team".equalsIgnoreCase(teamType))
        {
            try
            {
                for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
                {
                    if(dept instanceof EngineeringDepartment)
                    {
                        ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList().get(0).getWorkQueueDirectory().createWorkQueue(issueDesc);
                    }
                }
                JOptionPane.showMessageDialog(displayJPanel,"Work Queue added to Egineering Team.");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(displayJPanel,"Engineering team not available");
            }
            
        }
        else if("Tech Support Team".equalsIgnoreCase(teamType))
        {
            try
            {
                for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
                {
                    if(dept instanceof EngineeringDepartment)
                    {
                        ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList().get(0).getWorkQueueDirectory().createWorkQueue(issueDesc);
                    }
                }
                JOptionPane.showMessageDialog(displayJPanel,"Work Queue added to Egineering Team.");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(displayJPanel,"Engineering team not available");
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(displayJPanel,"Selected team not available");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void assignNurseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignNurseBtnActionPerformed
        int row = jTable2.getSelectedRow();
        int column = jTable2.getSelectedColumn();
        int patientId = 0;
        System.out.println("row: "+row+" column: "+column+" value: "+jTable2.getValueAt(row, column));
        try{
            patientId = (Integer)jTable2.getValueAt(row, column);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(displayJPanel,"Select valid Patient ID.");
            return;
        }
        boolean isDisplayed = false;
        for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            if(dept instanceof DoctorDepartment)
            {
                    for(DoctorDetails doctor: ((DoctorDepartment) dept).getDoctorDirectory().getDocDetails())
                    {
                        if(doctor.getEmployeeId()==account.getEmployee().getEmployeeId())
                        {
                            for (Patient patient : doctor.getPatientDirectory().getPatientList()){
                                if(patient!=null && patient.getPatientId()==patientId)
                                {
                                    isDisplayed = true;
                                    CardLayout layout = (CardLayout)this.displayJPanel.getLayout();
                                    this.displayJPanel.add(new AssignNurse(displayJPanel, ecosystem, patient));
                                    layout.next(displayJPanel);
                                    
                                }
                            }
                        }
                    }
            }
        }
        if(!isDisplayed)
        {
            JOptionPane.showMessageDialog(displayJPanel,"No records found. Select valid Patient ID.");
        }
        
    }//GEN-LAST:event_assignNurseBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        String firstName = fnameTextField.getText();
        String lastName = lnameTextField.getText();
        int employeeId = Integer.parseInt(empidTextField.getText());
        String teamType = teamTypeTextField.getText();
        String designation = designationComboBox.getSelectedItem().toString();
        String dob = jTextField3.getText();
        String salary = salaryTxtField.getText();
        
        System.out.println("employeeId: "+employeeId);
        boolean isUpdated=false;
        for(DepartmentClass dep: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            for(UserAccount user:dep.getUserDir().getUserAccountsList())
            {
                Employee emp = user.getEmployee();
                System.out.println("emp.getEmployeeId(): "+emp.getEmployeeId());
                if(emp.getEmployeeId()==employeeId)
                {
                    System.out.println("Updating employee details");
                    emp.setDateOfBirth(dob);
                    emp.setLastName(lastName);
                    emp.setDesignation(designation);
                    emp.setSalary(salary);
                    emp.setTeamType(teamType);
                    isUpdated = true;
                    break;
                }
            }
            if(isUpdated)
            {
                break;
            }
        }
        JOptionPane.showMessageDialog(displayJPanel,"Details updated!");
    }//GEN-LAST:event_submitBtnActionPerformed

    private void designationComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_designationComboBoxItemStateChanged
        // TODO add your handling code here:
        populateDocSalary();
    }//GEN-LAST:event_designationComboBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IssueDescjTextField1;
    private javax.swing.JButton ViewBtn;
    private javax.swing.JButton assignNurseBtn;
    private javax.swing.JComboBox designationComboBox;
    private javax.swing.JLabel detailsLabel;
    private javax.swing.JTextField empidTextField;
    private javax.swing.JTextField fnameTextField;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton labReportsBtn;
    private javax.swing.JTextField lnameTextField;
    private javax.swing.JTextField salaryTxtField;
    private javax.swing.JButton submitBtn;
    private javax.swing.JTextField teamTypeTextField;
    private javax.swing.JComboBox teamTypejComboBox1;
    private javax.swing.JLabel workQueueLabel;
    // End of variables declaration//GEN-END:variables
}
