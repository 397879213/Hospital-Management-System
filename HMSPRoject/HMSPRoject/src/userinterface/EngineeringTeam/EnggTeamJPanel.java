/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.EngineeringTeam;

import Business.Department.DepartmentClass;
import Business.Department.EngineeringDepartment;
import Business.Department.EquipmentMaintenanceDepartment;
import Business.Ecosystem;
import Business.Employee.Employee;
import Business.Employee.EmployeeDirectory;
import Business.Engineering.EngineeringTeamDetails;
import Business.Enterprise.Enterprise;
import Business.EquipmentMaintenance.EquipmentMaintenanceDirectory;
import Business.OrderDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkQueue;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lsrajput
 */
public class EnggTeamJPanel extends javax.swing.JPanel {

    /**
     * Creates new form equipmentMaintenanceJPanel
     */
    private JPanel displayJPanel;
    private OrderDirectory orderDir;
    private EmployeeDirectory empDir;
    private EquipmentMaintenanceDirectory emTeamDir;
    
    private UserAccount account;
    private DepartmentClass department;
    private Enterprise enterprise;
    private Ecosystem ecosystem;
    public EnggTeamJPanel(JPanel displayPanel, UserAccount account, DepartmentClass department, Enterprise enterprise,Ecosystem ecosystem) {
        initComponents();
        this.displayJPanel = displayPanel;
        this.department = department;
        this.enterprise = enterprise;
        this.account = account;
        this.ecosystem = ecosystem;
        Employee emp = account.getEmployee();
        fnameTxtField.setText(account.getEmployee().getFirstName());
        fnameTxtField.setEditable(false);
        empIDTxtfield.setText(account.getEmployee().getEmployeeId()+"");
        empIDTxtfield.setEditable(false);
        if(emp.getDateOfBirth()!=null)
        {
           dobTextField.setText(emp.getDateOfBirth());
        }
        if(emp.getLastName()!=null)
        {
            lnameTxtField.setText(emp.getLastName());
        }
        if(emp.getDesignation()!=null)
        {
            designationComboBox.setSelectedItem(emp.getDesignation());
        }
        if(emp.getTeamType()!=null)
        {
            teamTypeTxtField.setText(emp.getTeamType());
        }
        if(emp.getSalary()!=null)
        {
            salaryTxtField.setText(emp.getSalary());
        }
        populateTable();
    }

    public void populateTable()
    {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        
        model.setRowCount(0);
        
        for (DepartmentClass dept : ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList()){
            if(dept instanceof EngineeringDepartment)
            {
                for(EngineeringTeamDetails enggTeamDetails: ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList())
                {
                    for(WorkQueue workQueue: enggTeamDetails.getWorkQueueDirectory().getWorkQueueList())
                    {
                        Object[] row = new Object[4];
                        row[0] = workQueue.getId();
                        row[1] = workQueue.getDate();
                        row[2] = workQueue.getTask();
                        row[3] = workQueue.getStatus();
                        model.addRow(row);
                    }
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GSMCJLabel = new javax.swing.JLabel();
        WelcomeJLabel = new javax.swing.JLabel();
        PDJLabel = new javax.swing.JLabel();
        empIDJLabel = new javax.swing.JLabel();
        fnameJLabel = new javax.swing.JLabel();
        lnameJLabel = new javax.swing.JLabel();
        dobJLabel = new javax.swing.JLabel();
        WDJLabel = new javax.swing.JLabel();
        teamTypeJLabel = new javax.swing.JLabel();
        designationJLabel = new javax.swing.JLabel();
        salaryJLabel = new javax.swing.JLabel();
        empIDTxtfield = new javax.swing.JTextField();
        fnameTxtField = new javax.swing.JTextField();
        lnameTxtField = new javax.swing.JTextField();
        teamTypeTxtField = new javax.swing.JTextField();
        salaryTxtField = new javax.swing.JTextField();
        designationComboBox = new javax.swing.JComboBox();
        workQueueJlabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        acknowledgeBtn = new javax.swing.JButton();
        completeBtn = new javax.swing.JButton();
        raisearequestJLabel = new javax.swing.JLabel();
        targetTeamRRJLabel = new javax.swing.JLabel();
        teamTypeRRComboBox = new javax.swing.JComboBox();
        issueDescJlabel = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();
        submit1Btn = new javax.swing.JButton();
        dobTextField = new javax.swing.JTextField();
        issuejTextField1 = new javax.swing.JTextField();

        GSMCJLabel.setText("Grey-Sloan Medical Centre");

        WelcomeJLabel.setText("Welcome <Ria Rajput>");

        PDJLabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        PDJLabel.setText("Personal Details");

        empIDJLabel.setText("Employee ID :");

        fnameJLabel.setText("First Name :");

        lnameJLabel.setText("Last Name :");

        dobJLabel.setText("Date of Birth :");

        WDJLabel.setText("Work Details");

        teamTypeJLabel.setText("Team Type :");

        designationJLabel.setText("Designation :");

        salaryJLabel.setText("Salary :");

        teamTypeTxtField.setText("Equipment maintenace team");
        teamTypeTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teamTypeTxtFieldActionPerformed(evt);
            }
        });

        salaryTxtField.setEditable(false);

        designationComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Trainee Consultant", "Consultant", "Senior Consultant", "Manager" }));
        designationComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                designationComboBoxItemStateChanged(evt);
            }
        });

        workQueueJlabel.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        workQueueJlabel.setText("Work Queue");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task ID", "Date", "Task", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        acknowledgeBtn.setText("Acknowledge");
        acknowledgeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acknowledgeBtnActionPerformed(evt);
            }
        });

        completeBtn.setText("Complete");
        completeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeBtnActionPerformed(evt);
            }
        });

        raisearequestJLabel.setText("Raise a request");

        targetTeamRRJLabel.setText("Target Team :");

        teamTypeRRComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Equipment Maintenance Team", "Grey  Medith Hospital" }));
        teamTypeRRComboBox.setToolTipText("For any order requests other than the functional teams of GSMC,kindly select System Admin");

        issueDescJlabel.setText("Issue Description : ");

        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        submit1Btn.setText("Submit");
        submit1Btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submit1BtnActionPerformed(evt);
            }
        });

        dobTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dobTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(WelcomeJLabel)
                            .addComponent(PDJLabel)
                            .addComponent(WDJLabel)
                            .addComponent(workQueueJlabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fnameJLabel)
                                .addGap(280, 280, 280)
                                .addComponent(lnameJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(lnameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(dobJLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fnameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(dobTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(teamTypeJLabel)
                                            .addComponent(salaryJLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(salaryTxtField)
                                            .addComponent(teamTypeTxtField))))
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(empIDJLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(empIDTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(designationJLabel)
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(designationComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(submitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(306, 306, 306)
                        .addComponent(GSMCJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(acknowledgeBtn)
                        .addGap(19, 19, 19)
                        .addComponent(completeBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(raisearequestJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(submit1Btn)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(targetTeamRRJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(teamTypeRRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(issueDescJlabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(issuejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GSMCJLabel)
                .addGap(18, 18, 18)
                .addComponent(WelcomeJLabel)
                .addGap(18, 18, 18)
                .addComponent(PDJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fnameJLabel)
                    .addComponent(fnameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lnameJLabel)
                    .addComponent(lnameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dobJLabel)
                    .addComponent(empIDJLabel)
                    .addComponent(empIDTxtfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dobTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(WDJLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(teamTypeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(teamTypeJLabel)
                        .addComponent(designationJLabel)
                        .addComponent(designationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(salaryJLabel)
                    .addComponent(salaryTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(submitBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(workQueueJlabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acknowledgeBtn)
                    .addComponent(completeBtn))
                .addGap(18, 18, 18)
                .addComponent(raisearequestJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(targetTeamRRJLabel)
                    .addComponent(teamTypeRRComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(issueDescJlabel)
                    .addComponent(issuejTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(submit1Btn)
                .addContainerGap(117, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void teamTypeTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teamTypeTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_teamTypeTxtFieldActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        String firstName = fnameTxtField.getText();
        String lastName = lnameTxtField.getText();
        int employeeId = Integer.parseInt(empIDTxtfield.getText());
        String designation = designationComboBox.getSelectedItem().toString();
        String dob = dobTextField.getText();
        String salary = salaryTxtField.getText();
        String teamType = teamTypeTxtField.getText();
        System.out.println("employeeId: "+employeeId);
        boolean isUpdated=false;
        for(DepartmentClass dep: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
        {
            for(UserAccount user:dep.getUserDir().getUserAccountsList())
            {
                Employee emp = user.getEmployee();
                System.out.println("emp.getEmployeeId(): "+emp.getEmployeeId());
                if(emp.getEmployeeId()==employeeId)
                {
                    System.out.println("Updating employee details");
                    emp.setDateOfBirth(dob);
                    emp.setLastName(lastName);
                    emp.setDesignation(designation);
                    emp.setSalary(salary);
                    emp.setTeamType(teamType);
                    isUpdated=true;
                    break;
                }
            }
            if(isUpdated)
                break;
        }
        JOptionPane.showMessageDialog(displayJPanel,"Updated Successfully!");
    }//GEN-LAST:event_submitBtnActionPerformed

    private void dobTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dobTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dobTextFieldActionPerformed

    private void acknowledgeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acknowledgeBtnActionPerformed
        int row = jTable1.getSelectedRow();
        int column = jTable1.getSelectedColumn();
        int taskId = 0;
        System.out.println("row: "+row+" column: "+column+" value: "+jTable1.getValueAt(row, column));
        try{
            taskId = (Integer)jTable1.getValueAt(row, column);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(displayJPanel,"Select valid Task ID.");
            return;
        }
        for (DepartmentClass dept : ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList()){
            if(dept instanceof EngineeringDepartment)
            {
                for(EngineeringTeamDetails enggTeamDetails: ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList())
                {
                    for(WorkQueue workQueue: enggTeamDetails.getWorkQueueDirectory().getWorkQueueList())
                    {
                        if(workQueue.getId()==taskId)
                        {
                            workQueue.setStatus("Acknowledged");
                            break;
                        }
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(displayJPanel,"Your Acknowledgemet received!");
         populateTable();
    }//GEN-LAST:event_acknowledgeBtnActionPerformed

    private void completeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeBtnActionPerformed
        int row = jTable1.getSelectedRow();
        int column = jTable1.getSelectedColumn();
        int taskId = 0;
        System.out.println("row: "+row+" column: "+column+" value: "+jTable1.getValueAt(row, column));
        try{
            taskId = (Integer)jTable1.getValueAt(row, column);
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(displayJPanel,"Select valid Task ID.");
            return;
        }
        for (DepartmentClass dept : ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList()){
            if(dept instanceof EngineeringDepartment)
            {
                for(EngineeringTeamDetails enggTeamDetails: ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList())
                {
                    for(WorkQueue workQueue: enggTeamDetails.getWorkQueueDirectory().getWorkQueueList())
                    {
                        if(workQueue.getId()==taskId)
                        {
                            enggTeamDetails.getWorkQueueDirectory().getWorkQueueList().remove(workQueue);
                            break;
                        }
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(displayJPanel,"Task completed!");
         populateTable();
    }//GEN-LAST:event_completeBtnActionPerformed

    private void submit1BtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submit1BtnActionPerformed
        String teamType = (String)teamTypeRRComboBox.getSelectedItem();
        String issueDesc = issuejTextField1.getText();
        if("Equipment Maintenance Team".equalsIgnoreCase(teamType))
        {
            try
            {
                for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
                {
                    if(dept instanceof EquipmentMaintenanceDepartment)
                    {
                        ((EquipmentMaintenanceDepartment) dept).getEquipmentMaintananceDirectory().getEquipmentMaintananceList().get(0).getWorkQueueDirectory().createWorkQueue(issueDesc);

                    }
                }
                JOptionPane.showMessageDialog(displayJPanel,"Work Queue added to Equipment Maintenance Team.");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(displayJPanel,"Equipment Maintenance team not available");
            }
            
        }
        else if("Engineering Team".equalsIgnoreCase(teamType))
        {
            try
            {
                for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
                {
                    if(dept instanceof EngineeringDepartment)
                    {
                        ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList().get(0).getWorkQueueDirectory().createWorkQueue(issueDesc);
                    }
                }
                JOptionPane.showMessageDialog(displayJPanel,"Work Queue added to Egineering Team.");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(displayJPanel,"Engineering team not available");
            }
            
        }
        else if("Tech Support Team".equalsIgnoreCase(teamType))
        {
            try
            {
                for(DepartmentClass dept: ecosystem.getNetworkList().get(0).getDepartmentDirectory().getDepartmentList())
                {
                    if(dept instanceof EngineeringDepartment)
                    {
                        ((EngineeringDepartment) dept).getEngineeringTeamDirectory().getEnggTeamList().get(0).getWorkQueueDirectory().createWorkQueue(issueDesc);
                    }
                }
                JOptionPane.showMessageDialog(displayJPanel,"Work Queue added to Egineering Team.");
            }
            catch(Exception e)
            {
                JOptionPane.showMessageDialog(displayJPanel,"Engineering team not available");
            }
            
        }
        else
        {
            JOptionPane.showMessageDialog(displayJPanel,"Selected team not available");
        }
    }//GEN-LAST:event_submit1BtnActionPerformed

    private void designationComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_designationComboBoxItemStateChanged
        // TODO add your handling code here:
        populateSalary();
    }//GEN-LAST:event_designationComboBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GSMCJLabel;
    private javax.swing.JLabel PDJLabel;
    private javax.swing.JLabel WDJLabel;
    private javax.swing.JLabel WelcomeJLabel;
    private javax.swing.JButton acknowledgeBtn;
    private javax.swing.JButton completeBtn;
    private javax.swing.JComboBox designationComboBox;
    private javax.swing.JLabel designationJLabel;
    private javax.swing.JLabel dobJLabel;
    private javax.swing.JTextField dobTextField;
    private javax.swing.JLabel empIDJLabel;
    private javax.swing.JTextField empIDTxtfield;
    private javax.swing.JLabel fnameJLabel;
    private javax.swing.JTextField fnameTxtField;
    private javax.swing.JLabel issueDescJlabel;
    private javax.swing.JTextField issuejTextField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lnameJLabel;
    private javax.swing.JTextField lnameTxtField;
    private javax.swing.JLabel raisearequestJLabel;
    private javax.swing.JLabel salaryJLabel;
    private javax.swing.JTextField salaryTxtField;
    private javax.swing.JButton submit1Btn;
    private javax.swing.JButton submitBtn;
    private javax.swing.JLabel targetTeamRRJLabel;
    private javax.swing.JLabel teamTypeJLabel;
    private javax.swing.JComboBox teamTypeRRComboBox;
    private javax.swing.JTextField teamTypeTxtField;
    private javax.swing.JLabel workQueueJlabel;
    // End of variables declaration//GEN-END:variables

    private void populateSalary() {
        if(designationComboBox.getSelectedItem()=="Trainee Consultant")
      {
          salaryTxtField.setText("20000.00");
      }
      else if(designationComboBox.getSelectedItem()=="Junior Consultant")
      {
          salaryTxtField.setText("22500.00");
      }
      else if(designationComboBox.getSelectedItem()=="Senior Consultant")
      {
          salaryTxtField.setText("25000.00");
      }
      else
      {
          salaryTxtField.setText("40000.00");
      }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
